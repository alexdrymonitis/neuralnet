#N canvas 73 30 1347 979 10;
#X floatatom 1012 736 10 0 0 1 loss - - 0;
#X floatatom 989 759 10 0 0 1 accuracy - - 0;
#X floatatom 945 782 8 0 0 1 epoch - - 0;
#N canvas 719 482 591 316 save_and_load 0;
#X listbox 50 57 20 0 0 0 - - - 0;
#X listbox 50 167 20 0 0 0 - - - 0;
#X msg 50 83 save models/\$1.ann;
#X text 181 54 write a name for the model you want to save \, without
file extension (default is .ann). it will be saved in the models subdirectory
of this directory. otherwise \, set your own destination directory.
;
#X msg 50 191 load models/\$1.ann;
#X text 184 163 write the name of the model you want to load \, without
file extension \, saved in the models subdirectory. otherwise \, set
your own directory to pull the model from.;
#X obj 901 664 r mouse_input_example;
#X obj 50 107 s mouse_input_example;
#X obj 50 214 s mouse_input_example;
#X connect 0 0 2 0;
#X connect 1 0 4 0;
#X connect 2 0 7 0;
#X connect 4 0 8 0;
#X restore 901 242 pd save_and_load;
#X msg 46 861 poll;
#X msg 88 861 nopoll;
#X msg 901 507 destroy;
#X obj 475 920 *~, f 7;
#X obj 475 943 dac~;
#X obj 517 854 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 #fcfcfc
#000000 #000000 0 1;
#X obj 514 874 pack f 20;
#X obj 514 897 line~;
#X floatatom 46 918 8 0 0 1 x - - 0;
#X floatatom 113 918 8 0 0 1 y - - 0;
#X msg 476 292 shuffle_train_set;
#X msg 475 400 train 10;
#X msg 47 316 set_activation_function 0 sigmoid \, set_activation_function
1 sigmoid \, set_activation_function 2 linear;
#X text 46 294 2) set the activation functions;
#X msg 47 397 set_loss_function mse;
#X text 47 375 3) set the loss function;
#X msg 47 466 set_optimizer adam;
#X text 44 444 4) set the optimizer;
#X obj 901 127 spigot;
#X obj 934 106 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000 0 1;
#X msg 47 245 regression;
#X text 45 221 1) set the mode of the network;
#X listbox 901 330 20 0 0 1 model_name - - 0;
#X msg 901 405 morph models/\$1.ann \$2;
#X obj 901 381 pack s f;
#X floatatom 946 357 5 0 0 1 ramp_time - - 0;
#X text 44 514 5) set the learning rate;
#X text 46 586 6) set the decay of the learning rate;
#X text 46 652 7) set number of epochs;
#X msg 901 629 abort_training;
#X msg 475 708 validate;
#X floatatom 46 758 5 0 0 0 - - - 0;
#X msg 46 780 desired_accuracy \$1;
#X msg 621 606 release_mem;
#X msg 620 200 store;
#X msg 620 222 show;
#X msg 653 222 clear;
#X msg 692 222 hide;
#X obj 605 180 bng 15 250 50 0 empty empty set_random_params 17 7 0
10 #fcfcfc #000000 #000000;
#X obj 476 271 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc
#000000 #000000;
#N canvas 576 165 647 699 create_training_set 0;
#X obj 30 193 metro 10;
#X obj 30 217 t b b;
#X obj 30 459 spigot 1;
#X obj 75 436 r \$0-spigots;
#X obj 30 508 list append;
#X obj 30 556 list trim;
#X obj 30 533 list prepend add;
#X obj 30 11 inlet;
#X obj 107 509 print training_data;
#X obj 30 85 t f f;
#X obj 93 334 spigot 1;
#X obj 30 61 t f b;
#X msg 138 282 1;
#X text 154 336 don't let one random target too many through;
#X msg 30 35 1;
#X obj 288 21 inlet;
#X obj 288 44 route bang store;
#X obj 334 91 s \$0-store;
#X obj 47 163 r \$0-close_metro;
#N canvas 106 415 441 397 done 0;
#X obj 20 20 inlet;
#X obj 20 313 outlet;
#X obj 47 82 t b b;
#X msg 47 240 0;
#X obj 47 181 t b b;
#X obj 47 263 s \$0-spigots;
#X obj 20 60 t b b;
#X msg 20 289 0;
#X msg 74 105 0;
#X obj 74 128 s \$0-close_metro;
#X msg 74 210 normalize_output 350 350 1000 350 1000;
#X text 89 180 also \, normalize the values of the synth parameters
;
#X obj 74 240 s acc_input_example;
#X connect 0 0 6 0;
#X connect 2 0 4 0;
#X connect 2 1 8 0;
#X connect 3 0 5 0;
#X connect 4 0 3 0;
#X connect 4 1 10 0;
#X connect 6 0 7 0;
#X connect 6 1 2 0;
#X connect 7 0 1 0;
#X connect 8 0 9 0;
#X connect 10 0 12 0;
#X restore 168 293 pd done;
#N canvas 498 535 360 272 get_params 0;
#X obj 20 20 inlet;
#X obj 20 182 outlet;
#X obj 35 60 r \$0-reset;
#X obj 20 106 f;
#X obj 20 129 t f f;
#X obj 47 106 + 1;
#X msg 35 83 0;
#X obj 20 152 text get \$0-params;
#X text 78 108 get the stored parameters one by one;
#X connect 0 0 3 0;
#X connect 2 0 6 0;
#X connect 3 0 4 0;
#X connect 4 0 7 0;
#X connect 4 1 5 0;
#X connect 5 0 3 1;
#X connect 6 0 3 1;
#X connect 7 0 1 0;
#X restore 93 410 pd get_params;
#N canvas 792 594 762 370 randomize_coords 0;
#X obj 20 20 inlet;
#X obj 20 297 outlet;
#X obj 20 249 +;
#X obj 90 249 +;
#X obj 107 204 unpack f f f;
#X obj 20 272 pack f f f, f 24;
#X obj 20 60 t b b b, f 24;
#X obj 161 249 +;
#X text 183 57 provide small variations on the accelerometer values
;
#X obj 90 98 random 500;
#X obj 20 98 random 500;
#X obj 161 98 random 500;
#X obj 20 145 clip 0 1;
#X obj 90 145 clip 0 1;
#X obj 161 145 clip 0 1;
#N canvas 498 535 360 272 get_accel_vals 0;
#X obj 20 20 inlet;
#X obj 20 182 outlet;
#X obj 35 60 r \$0-reset;
#X obj 20 106 f;
#X obj 20 129 t f f;
#X obj 47 106 + 1;
#X msg 35 83 0;
#X text 78 108 get the stored parameters one by one;
#X obj 20 152 text get \$0-acc_vals;
#X connect 0 0 3 0;
#X connect 2 0 6 0;
#X connect 3 0 4 0;
#X connect 4 0 8 0;
#X connect 4 1 5 0;
#X connect 5 0 3 1;
#X connect 6 0 3 1;
#X connect 8 0 1 0;
#X restore 107 181 pd get_accel_vals;
#X obj 107 20 inlet;
#X obj 20 121 / 100000;
#X obj 90 121 / 100000;
#X obj 161 121 / 100000;
#X connect 0 0 6 0;
#X connect 2 0 5 0;
#X connect 3 0 5 1;
#X connect 4 0 2 1;
#X connect 4 1 3 1;
#X connect 4 2 7 1;
#X connect 5 0 1 0;
#X connect 6 0 10 0;
#X connect 6 1 9 0;
#X connect 6 2 11 0;
#X connect 7 0 5 2;
#X connect 9 0 18 0;
#X connect 10 0 17 0;
#X connect 11 0 19 0;
#X connect 12 0 2 0;
#X connect 13 0 3 0;
#X connect 14 0 7 0;
#X connect 15 0 4 0;
#X connect 16 0 15 0;
#X connect 17 0 12 0;
#X connect 18 0 13 0;
#X connect 19 0 14 0;
#X restore 30 484 pd randomize_coords;
#N canvas 584 237 200 214 reset 0;
#X obj 20 20 inlet;
#X msg 97 101 1;
#X obj 20 124 s \$0-reset;
#X obj 97 124 s \$0-spigots;
#X obj 20 60 sel 1;
#X obj 20 83 t b b;
#X connect 0 0 4 0;
#X connect 1 0 3 0;
#X connect 4 0 5 0;
#X connect 5 0 2 0;
#X connect 5 1 1 0;
#X restore 57 112 pd reset;
#N canvas 442 227 411 572 set_params 0;
#X obj 43 30 inlet;
#X obj 43 397 + 50;
#X obj 70 326 + 50;
#X obj 43 420 s carrier;
#X obj 98 234 random 700;
#X obj 98 257 + 300;
#X obj 43 374 random 300;
#X obj 70 303 random 300;
#X obj 43 56 t b b b b b, f 19;
#X obj 70 349 s mod1;
#X obj 98 280 s index1;
#X obj 126 186 + 50;
#X obj 154 94 random 700;
#X obj 154 117 + 300;
#X obj 126 163 random 300;
#X obj 126 209 s mod2;
#X obj 154 140 s index2;
#X connect 0 0 8 0;
#X connect 1 0 3 0;
#X connect 2 0 9 0;
#X connect 4 0 5 0;
#X connect 5 0 10 0;
#X connect 6 0 1 0;
#X connect 7 0 2 0;
#X connect 8 0 6 0;
#X connect 8 1 7 0;
#X connect 8 2 4 0;
#X connect 8 3 14 0;
#X connect 8 4 12 0;
#X connect 11 0 15 0;
#X connect 12 0 13 0;
#X connect 13 0 16 0;
#X connect 14 0 11 0;
#X restore 288 175 pd set_params;
#X obj 288 91 t b b;
#X msg 315 115 1;
#X obj 315 138 s \$0-spigots;
#X obj 168 316 t f b;
#X obj 449 334 outlet;
#N canvas 958 533 548 272 counter 0;
#X obj 20 20 inlet;
#X obj 20 212 outlet;
#X obj 35 60 r \$0-reset;
#X obj 20 106 f;
#X obj 20 129 t f f;
#X obj 47 106 + 1;
#X msg 35 83 0;
#X obj 20 152 sel 1e+20;
#X text 83 151 initial large number that is replaced by the number
of synth parameters and phone positions stored;
#X obj 119 60 r \$0-num_params;
#X connect 0 0 3 0;
#X connect 2 0 6 0;
#X connect 3 0 4 0;
#X connect 4 0 7 0;
#X connect 4 1 5 0;
#X connect 5 0 3 1;
#X connect 6 0 3 1;
#X connect 7 0 1 0;
#X connect 9 0 7 1;
#X restore 168 270 pd counter;
#X obj 93 372 t b b;
#N canvas 898 380 822 425 store_params_and_accel_vals 0;
#X obj 20 20 inlet;
#X obj 234 130 r carrier;
#X obj 248 325 loadbang;
#X msg 248 348 1e+15;
#X obj 213 296 spigot 1;
#X obj 258 272 r \$0-spigots;
#X msg 61 132 clear;
#X msg 20 157 click;
#X msg 102 109 close;
#X obj 213 272 list;
#X obj 213 77 r \$0-store;
#X obj 20 81 route show clear hide;
#X obj 20 203 text define \$0-params;
#X obj 213 376 text set \$0-params;
#X obj 520 118 f;
#X obj 520 141 t f f;
#X obj 547 118 + 1;
#X obj 535 70 r \$0-reset;
#X msg 535 93 0;
#X obj 520 164 s \$0-num_params;
#X obj 456 243 r accel_vals;
#X obj 474 325 loadbang;
#X msg 474 348 1e+15;
#X obj 435 296 spigot 1;
#X obj 480 272 r \$0-spigots;
#X obj 435 272 list;
#X obj 213 100 t b b b;
#X obj 569 376 text define \$0-acc_vals;
#X obj 435 376 text set \$0-acc_vals;
#X obj 254 151 r mod1;
#X obj 274 172 r index1;
#X obj 234 243 pack f f f f f;
#X obj 294 194 r mod2;
#X obj 315 215 r index2;
#X connect 0 0 11 0;
#X connect 1 0 31 0;
#X connect 2 0 3 0;
#X connect 3 0 13 1;
#X connect 4 0 13 0;
#X connect 5 0 4 1;
#X connect 6 0 12 0;
#X connect 6 0 27 0;
#X connect 7 0 12 0;
#X connect 8 0 12 0;
#X connect 9 0 4 0;
#X connect 10 0 26 0;
#X connect 11 0 7 0;
#X connect 11 1 6 0;
#X connect 11 2 8 0;
#X connect 14 0 15 0;
#X connect 15 0 19 0;
#X connect 15 1 16 0;
#X connect 16 0 14 1;
#X connect 17 0 18 0;
#X connect 18 0 14 1;
#X connect 20 0 25 1;
#X connect 21 0 22 0;
#X connect 22 0 28 1;
#X connect 23 0 28 0;
#X connect 24 0 23 1;
#X connect 25 0 23 0;
#X connect 26 0 9 0;
#X connect 26 1 25 0;
#X connect 26 2 14 0;
#X connect 29 0 31 1;
#X connect 30 0 31 2;
#X connect 31 0 9 1;
#X connect 32 0 31 3;
#X connect 33 0 31 4;
#X restore 381 67 pd store_params_and_accel_vals;
#X obj 30 579 s acc_input_example;
#N canvas 498 293 200 268 counter 0;
#X obj 20 20 inlet;
#X obj 20 238 outlet;
#X obj 69 238 outlet;
#X obj 35 60 r \$0-reset;
#X obj 20 106 f;
#X obj 20 129 t f f;
#X obj 47 106 + 1;
#X msg 35 83 0;
#X obj 42 178 t b b;
#X obj 20 154 sel 0 99;
#X connect 0 0 4 0;
#X connect 3 0 7 0;
#X connect 4 0 5 0;
#X connect 5 0 9 0;
#X connect 5 1 6 0;
#X connect 6 0 4 1;
#X connect 7 0 4 1;
#X connect 8 0 7 0;
#X connect 8 1 2 0;
#X connect 9 0 1 0;
#X connect 9 1 8 0;
#X restore 93 235 pd counter 99;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 1 1 33 0;
#X connect 2 0 21 0;
#X connect 3 0 2 1;
#X connect 4 0 6 0;
#X connect 4 0 8 0;
#X connect 5 0 32 0;
#X connect 6 0 5 0;
#X connect 7 0 14 0;
#X connect 9 0 0 0;
#X connect 9 1 22 0;
#X connect 10 0 30 0;
#X connect 11 0 9 0;
#X connect 11 1 12 0;
#X connect 12 0 10 1;
#X connect 14 0 11 0;
#X connect 15 0 16 0;
#X connect 16 0 24 0;
#X connect 16 1 17 0;
#X connect 16 2 31 0;
#X connect 18 0 0 0;
#X connect 19 0 27 0;
#X connect 20 0 4 1;
#X connect 21 0 4 0;
#X connect 24 0 23 0;
#X connect 24 1 25 0;
#X connect 25 0 26 0;
#X connect 27 0 10 1;
#X connect 27 1 28 0;
#X connect 29 0 19 0;
#X connect 30 0 20 0;
#X connect 30 1 21 1;
#X connect 33 0 10 0;
#X connect 33 1 29 0;
#X restore 476 247 pd create_training_set;
#X text 499 270 bangs when the training dataset is done;
#X text 900 575 in case you see the accuracy and loss value being stuck
to only slight variations \, you can abort the training before it is
over;
#X msg 475 606 retrain;
#X text 588 290 shuffles training dataset for better fitting;
#N canvas 271 165 642 448 some_notes 0;
#X floatatom 44 245 5 0 0 0 - - - 0;
#X msg 44 267 set_accuracy_denominator \$1;
#X obj 44 290 s mouse_input_example;
#X text 43 33 One of the most important details with neural networks
is the training dataset. A dataset can make a network learn well \,
or make it overfit and not perform properly. In this example I have
created 100 iterations for each group of values \, where each iteration
has a small variation in the accelerometer values (open [pd create_training_set]
to see how this is done). It took quite some iterations before I ended
up in this setting.;
#X text 43 146 You are free to experiment with different datasets to
see if you can get better results. If you're fine with the results
\, but the accuracy is still not satisfactory \, you can reduce the
accuracy denominator (default is 250) with the message below \, which
will make [neuralnet] more tolerant and will output a higher accuracy.
;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X restore 901 893 pd some_notes;
#N canvas 744 182 423 484 accelerometer_values 0;
#X obj 30 20 inlet;
#X obj 57 368 outlet;
#X obj 150 368 outlet;
#X obj 30 119 netreceive -u -b;
#X obj 30 144 oscparse;
#X obj 30 169 list trim;
#X obj 30 194 route multisense;
#X obj 30 244 route x y z, f 47;
#X obj 30 269 clip -10 10;
#X obj 123 269 clip -10 10;
#X obj 216 269 clip -10 10;
#X obj 30 219 route accelerometer;
#X obj 30 403 pack f f f;
#X obj 30 340 t f f;
#X obj 123 340 t f f;
#X obj 216 340 t f f;
#X obj 30 426 s accel_vals;
#X obj 243 368 outlet;
#X obj 30 43 route poll nopoll;
#X msg 30 66 9001;
#X msg 79 66 0;
#X msg 30 93 listen \$1;
#X obj 30 293 map -10 10 0 1;
#X obj 123 293 map -10 10 0 1;
#X obj 216 293 map -10 10 0 1;
#X connect 0 0 18 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 11 0;
#X connect 7 0 8 0;
#X connect 7 1 9 0;
#X connect 7 2 10 0;
#X connect 8 0 22 0;
#X connect 9 0 23 0;
#X connect 10 0 24 0;
#X connect 11 0 7 0;
#X connect 12 0 16 0;
#X connect 13 0 12 0;
#X connect 13 1 1 0;
#X connect 14 0 12 1;
#X connect 14 1 2 0;
#X connect 15 0 12 2;
#X connect 15 1 17 0;
#X connect 18 0 19 0;
#X connect 18 1 20 0;
#X connect 19 0 21 0;
#X connect 20 0 21 0;
#X connect 21 0 3 0;
#X connect 22 0 13 0;
#X connect 23 0 14 0;
#X connect 24 0 15 0;
#X restore 46 894 pd accelerometer_values;
#X floatatom 181 918 8 0 0 1 z - - 0;
#X obj 901 841 s carrier;
#X obj 901 818 unpack f f f f f, f 47;
#X obj 970 841 s mod1;
#X obj 1040 841 s index1;
#X obj 1110 841 s mod2;
#X obj 1180 841 s index2;
#N canvas 813 59 559 362 synth 0;
#X floatatom 43 77 8 0 0 2 carrier - - 0;
#X obj 43 273 +~;
#X obj 43 296 osc~;
#X floatatom 122 77 8 0 0 2 mod1 - - 0;
#X obj 122 233 osc~;
#X obj 122 256 *~;
#X floatatom 202 77 8 0 0 2 index1 - - 0;
#X obj 202 216 pack f 20;
#X obj 202 239 line~;
#X obj 43 13 r carrier;
#X obj 122 209 +~;
#X floatatom 292 77 8 0 0 2 mod2 - - 0;
#X obj 292 169 osc~;
#X obj 292 192 *~;
#X obj 372 152 pack f 20;
#X obj 372 175 line~;
#X obj 122 13 r mod1;
#X obj 202 13 r index1;
#X obj 292 13 r mod2;
#X obj 372 13 r index2;
#X obj 43 319 outlet~;
#X obj 43 190 pack f 20;
#X obj 122 117 pack f 20;
#X obj 292 109 pack f 20;
#X obj 122 151 line~;
#X obj 43 220 line~;
#X obj 292 139 line~;
#X floatatom 372 77 8 0 0 2 index2 - - 0;
#X connect 0 0 21 0;
#X connect 1 0 2 0;
#X connect 2 0 20 0;
#X connect 3 0 22 0;
#X connect 4 0 5 0;
#X connect 5 0 1 1;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 8 0 5 1;
#X connect 9 0 0 0;
#X connect 10 0 4 0;
#X connect 11 0 23 0;
#X connect 12 0 13 0;
#X connect 13 0 10 1;
#X connect 14 0 15 0;
#X connect 15 0 13 1;
#X connect 16 0 3 0;
#X connect 17 0 6 0;
#X connect 18 0 11 0;
#X connect 19 0 27 0;
#X connect 21 0 25 0;
#X connect 22 0 24 0;
#X connect 23 0 26 0;
#X connect 24 0 10 0;
#X connect 25 0 1 0;
#X connect 26 0 12 0;
#X connect 27 0 14 0;
#X coords 0 -1 1 1 400 60 1 30 40;
#X restore 476 760 pd synth;
#X obj 476 227 bng 15 250 50 0 empty empty create_dataset 17 7 0 10
#fcfcfc #000000 #000000;
#X obj 46 803 s acc_input_example;
#X obj 47 268 s acc_input_example;
#X obj 47 352 s acc_input_example;
#X obj 47 420 s acc_input_example;
#X obj 47 489 s acc_input_example;
#X obj 47 561 s acc_input_example;
#X obj 47 630 s acc_input_example;
#X obj 47 700 s acc_input_example;
#X obj 476 315 s acc_input_example;
#X obj 475 423 s acc_input_example;
#X obj 475 632 s acc_input_example;
#X obj 475 731 s acc_input_example;
#X obj 901 173 s acc_input_example;
#X obj 901 428 s acc_input_example;
#X obj 901 532 s acc_input_example;
#X obj 901 652 s acc_input_example;
#X obj 901 688 r acc_input_example;
#X text 45 836 9) start polling your phone's accelerometer;
#X text 475 22 10) click on the bang below to get random values in
the oscillator parameters to the right. When you get a result that
you like \, hold your phone in a unique position and click on the "store"
message to store it. Repeat this process as many times as you like.
When done \, click on the "create_dataset" bang below. A training data
set will be created with random variations on the accelerometer values.
A bang is sent out the outlet when done \, which also sends the "shuffle_train_set"
to [neuralnet]. If you want to start this process from the beginning
\, make sure to first click on "clear" below \, to clear the stored
parameters;
#X text 475 350 11) train the network. the argument is percentage of
data to be used for validating. in this case we'll use 10% of the data
to validate the model;
#X text 515 821 14) turn the DSP on and turn up the volume in the slider
to hear the results;
#X obj 901 12 r accel_vals;
#X msg 901 150 predict \$1 \$2 \$3;
#X text 932 34 15) open the [spigot] below to start predicting. you
might want to click on "show" to the left to pop up the window with
the four groups of values used for training and compare them with the
predictions when you move your phone to the positions you used for
training;
#X text 899 202 16) if you want to save your model \, open this subpatch
for info;
#X text 899 276 17) you can also morph between saved models (mind \,
if you haven't saved your model and call "morph" with another model
\, the current one will be lost);
#X text 899 470 18) when done \, destroy the network if you want to
(it will be destroyed when this patch is closed);
#X obj 901 712 neuralnet 3 64 64 5;
#X text 44 723 8) set a desired minimum accuracy if you want to be
able to retraing the model without repeating the process in step 10
;
#X text 44 12 This example is similar to 03-mouse_input_example \,
only it uses the accelerometer values of a smartphone instead of the
mouse coordinates \, and it controls five synth parameters instead
of three. You should have a mobile app that sends accelerometer values
over OSC. The port number is 9001 (see [pd accelerometer_values]. For
this example I have used the MultiSense OSC app for Android. You can
use which ever you like \, but make sure to set the OSC address correctly
(same subpatch). In my case \, the address is /multisense/accelerometer/x
etc. for the x \, y \, and z values. The range can also vary. In my
case the values are between -10 and 10 but other apps might differ.
Set the first two arguments to [clip] and the [map] abstraction accordingly
(same subpatch);
#X msg 47 677 set_epochs 2000;
#X msg 47 607 set_decay 0.0001;
#X msg 47 538 set_learning_rate 0.03;
#X msg 531 606 keep_training;
#X text 472 451 12) in case you have set a desired accuracy \, and
the accuracy of [neuralnet] has not reached it \, the training dataset
will not be erased from its memory. If you want to change some parameters
and retrain the network \, first change any parameters you want \,
and then send "retrain" to train from scratch \, or "keep_training"
to start over without resetting the weights and biases. Otherwise \,
if you still want to move on with validating and making predictions
\, send the "release_mem" message first. If you haven't set a desired
accuracy \, don't send any of these messages \, as Pd will most likely
crash;
#X text 473 660 13) validate the network with 10% of the training data
set. check the number of atoms connected to the outlets of [neuralnet]
to see if they change;
#X connect 4 0 50 0;
#X connect 5 0 50 0;
#X connect 6 0 74 0;
#X connect 7 0 8 0;
#X connect 7 0 8 1;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X connect 11 0 7 1;
#X connect 14 0 68 0;
#X connect 15 0 69 0;
#X connect 16 0 62 0;
#X connect 18 0 63 0;
#X connect 20 0 64 0;
#X connect 22 0 82 0;
#X connect 23 0 22 1;
#X connect 24 0 61 0;
#X connect 26 0 28 0;
#X connect 27 0 73 0;
#X connect 28 0 27 0;
#X connect 29 0 28 1;
#X connect 33 0 75 0;
#X connect 34 0 71 0;
#X connect 35 0 36 0;
#X connect 36 0 60 0;
#X connect 37 0 70 0;
#X connect 38 0 44 1;
#X connect 39 0 44 1;
#X connect 40 0 44 1;
#X connect 41 0 44 1;
#X connect 42 0 44 1;
#X connect 43 0 14 0;
#X connect 44 0 43 0;
#X connect 47 0 70 0;
#X connect 50 0 12 0;
#X connect 50 1 13 0;
#X connect 50 2 51 0;
#X connect 53 0 52 0;
#X connect 53 1 54 0;
#X connect 53 2 55 0;
#X connect 53 3 56 0;
#X connect 53 4 57 0;
#X connect 58 0 7 0;
#X connect 59 0 44 0;
#X connect 76 0 87 0;
#X connect 81 0 22 0;
#X connect 82 0 72 0;
#X connect 87 0 53 0;
#X connect 87 2 2 0;
#X connect 87 4 1 0;
#X connect 87 5 0 0;
#X connect 90 0 67 0;
#X connect 91 0 66 0;
#X connect 92 0 65 0;
#X connect 93 0 70 0;
