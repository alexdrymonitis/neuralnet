#N canvas 326 132 954 856 10;
#X obj 47 637 neuralnet;
#X floatatom 98 661 10 0 0 1 loss - - 0;
#X floatatom 87 684 8 0 0 1 accuracy - - 0;
#X floatatom 67 707 8 0 0 1 epoch - - 0;
#X obj 47 731 s predictions;
#X msg 506 751 destroy;
#X msg 47 419 data_out_arrays output_data;
#X msg 47 347 data_in_arrays input_data;
#X msg 47 492 train;
#X text 47 19 1) create a network;
#N canvas 388 317 839 517 data_arrays 0;
#X obj 31 183 array size input_data;
#X obj 31 229 until;
#X obj 31 252 f;
#X obj 31 276 t f f;
#X obj 31 127 loadbang;
#X obj 58 252 + 1;
#X obj 31 206 t f f;
#X obj 31 362 pack, f 5;
#X obj 88 317 /;
#X obj 31 434 array define input_data 1000;
#X obj 215 434 array define output_data 1000;
#X obj 31 299 t f f;
#X obj 88 344 t f f;
#X obj 31 331 t f f;
#X obj 236 362 *;
#N canvas 1280 491 450 300 two_pi 0;
#X msg 136 117 1;
#X obj 136 139 atan;
#X obj 136 93 loadbang;
#X obj 136 183 outlet;
#X obj 136 161 * 8;
#X connect 0 0 1 0;
#X connect 1 0 4 0;
#X connect 2 0 0 0;
#X connect 4 0 3 0;
#X restore 251 338 pd two_pi;
#X obj 215 410 pack;
#X obj 236 385 sin;
#X obj 411 229 until;
#X obj 411 252 f;
#X obj 411 276 t f f;
#X obj 438 252 + 1;
#X obj 411 206 t f f;
#X obj 411 359 pack, f 5;
#X obj 478 317 /;
#X obj 411 299 t f f;
#X obj 31 155 t b b;
#X obj 636 359 *;
#N canvas 1280 491 450 300 two_pi 0;
#X msg 136 117 1;
#X obj 136 139 atan;
#X obj 136 93 loadbang;
#X obj 136 183 outlet;
#X obj 136 161 * 8;
#X connect 0 0 1 0;
#X connect 1 0 4 0;
#X connect 2 0 0 0;
#X connect 4 0 3 0;
#X restore 651 335 pd two_pi;
#X obj 615 407 pack;
#X obj 636 382 sin;
#X obj 478 341 t f f;
#X obj 411 329 t f f;
#X text 29 13 the two pairs of arrays in this subpatch create the input
and output for the training and testing data sets for the neural network
\; the input is a ramp from 0 to 1 and the output is a sine wave. the
training data set consists of 1000 elements and the testing data set
of 100 elements;
#X obj 411 173 array size input_validate;
#X obj 411 382 array define input_validate 100;
#X obj 615 431 array define output_validate 100;
#X connect 0 0 6 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 11 0;
#X connect 3 1 5 0;
#X connect 4 0 26 0;
#X connect 5 0 2 1;
#X connect 6 0 1 0;
#X connect 6 1 8 1;
#X connect 7 0 9 0;
#X connect 8 0 12 0;
#X connect 11 0 13 0;
#X connect 11 1 8 0;
#X connect 12 0 7 1;
#X connect 12 1 14 0;
#X connect 13 0 7 0;
#X connect 13 1 16 0;
#X connect 14 0 17 0;
#X connect 15 0 14 1;
#X connect 16 0 10 0;
#X connect 17 0 16 1;
#X connect 18 0 19 0;
#X connect 19 0 20 0;
#X connect 20 0 25 0;
#X connect 20 1 21 0;
#X connect 21 0 19 1;
#X connect 22 0 18 0;
#X connect 22 1 24 1;
#X connect 23 0 35 0;
#X connect 24 0 31 0;
#X connect 25 0 32 0;
#X connect 25 1 24 0;
#X connect 26 0 0 0;
#X connect 26 1 34 0;
#X connect 27 0 30 0;
#X connect 28 0 27 1;
#X connect 29 0 36 0;
#X connect 30 0 29 1;
#X connect 31 0 23 1;
#X connect 31 1 27 0;
#X connect 32 0 23 0;
#X connect 32 1 29 0;
#X connect 34 0 22 0;
#X restore 47 779 pd data_arrays;
#N canvas 0 50 450 250 (subpatch) 0;
#X array array1 1000 float 2;
#X coords 0 1 1000 -1 140 100 2 0 0;
#X restore 615 310 graph;
#X msg 505 348 predict \$1;
#X msg 505 302 bang;
#X text 45 90 2) set activation functions if different that default
;
#X obj 505 540 r predictions;
#X obj 508 469 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 #fcfcfc
#000000 #000000 0 1;
#X msg 505 489 predict \$1;
#X obj 505 566 vsl 15 128 -1 1 0 0 empty empty empty 0 -9 0 10 #fcfcfc
#000000 #000000 0 1;
#X msg 47 112 set_activation_function 0 relu \, set_activation_function
1 relu \, set_activation_function 2 linear;
#X msg 47 196 set_loss_function mse;
#X text 46 173 3) set the loss function;
#X msg 47 267 set_optimizer adam;
#X text 46 245 4) set the optimizer;
#N canvas 544 536 368 429 loop 0;
#X obj 30 20 inlet;
#X obj 90 319 outlet;
#X obj 30 222 t f f;
#X obj 185 309 tabwrite array1;
#X obj 185 282 spigot;
#X obj 218 260 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000 0 1;
#X obj 185 232 r predictions;
#X obj 30 129 until;
#X obj 30 175 f;
#X obj 30 198 t f f;
#X obj 57 175 + 1;
#X obj 90 263 /;
#X obj 30 245 t f f;
#X obj 30 293 sel;
#X obj 30 106 t f f f, f 13;
#X obj 45 270 - 1;
#X obj 30 83 array size array1;
#X msg 45 151 0;
#X obj 30 60 t b b b b;
#X msg 163 78 \; array1 const 0;
#X connect 0 0 18 0;
#X connect 2 0 12 0;
#X connect 2 1 3 1;
#X connect 4 0 3 0;
#X connect 5 0 4 1;
#X connect 6 0 4 0;
#X connect 7 0 8 0;
#X connect 8 0 9 0;
#X connect 9 0 2 0;
#X connect 9 1 10 0;
#X connect 10 0 8 1;
#X connect 11 0 1 0;
#X connect 12 0 13 0;
#X connect 12 1 11 0;
#X connect 13 0 5 0;
#X connect 14 0 7 0;
#X connect 14 1 15 0;
#X connect 14 2 11 1;
#X connect 15 0 13 1;
#X connect 16 0 14 0;
#X connect 17 0 8 1;
#X connect 18 0 16 0;
#X connect 18 1 17 0;
#X connect 18 2 5 0;
#X connect 18 3 19 0;
#X restore 505 325 pd loop;
#X text 47 320 5) set input data array (found in [pd data_arrays])
;
#X text 46 395 6) set output data array (found in [pd data_arrays])
;
#X text 45 468 7) train the model;
#X text 504 18 8) set a test input data array (found in [pd data_arrays])
;
#X text 502 91 9) set a test target data array (found in [pd data_arrays])
;
#X text 502 433 12) or test the network manually and check its output
in the vertical slider below;
#X text 504 713 13) when done \, destroy the network (it will also
be destroyed if you just close this patch);
#X msg 505 200 validate;
#X text 503 165 10) validate the model (check the number atoms connected
to its outlets);
#X msg 47 41 create 1 64 64 1 \, regression;
#X text 142 779 <- training and validating data set arrays;
#X msg 505 41 data_in_arrays input_validate;
#X msg 505 115 data_out_arrays output_validate;
#X obj 506 774 s sine_example;
#X obj 47 64 s sine_example;
#X obj 47 148 s sine_example;
#X obj 47 219 s sine_example;
#X obj 47 290 s sine_example;
#X obj 47 370 s sine_example;
#X obj 47 442 s sine_example;
#X obj 47 515 s sine_example;
#X obj 505 64 s sine_example;
#X obj 505 138 s sine_example;
#X obj 505 223 s sine_example;
#X obj 505 371 s sine_example;
#X obj 505 512 s sine_example;
#X obj 47 613 r sine_example;
#X text 504 260 11) send an incrementing ramp and see the output of
the network in the array to the right;
#X connect 0 0 4 0;
#X connect 0 2 3 0;
#X connect 0 4 2 0;
#X connect 0 5 1 0;
#X connect 5 0 38 0;
#X connect 6 0 44 0;
#X connect 7 0 43 0;
#X connect 8 0 45 0;
#X connect 12 0 49 0;
#X connect 13 0 24 0;
#X connect 15 0 18 0;
#X connect 16 0 17 0;
#X connect 17 0 50 0;
#X connect 19 0 40 0;
#X connect 20 0 41 0;
#X connect 22 0 42 0;
#X connect 24 0 12 0;
#X connect 32 0 48 0;
#X connect 34 0 39 0;
#X connect 36 0 46 0;
#X connect 37 0 47 0;
#X connect 51 0 0 0;
