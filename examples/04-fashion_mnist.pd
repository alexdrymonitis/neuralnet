#N canvas 277 30 1265 941 10;
#N canvas 1348 184 572 689 get_fashion_mnist_train_set 0;
#X obj 30 20 inlet;
#X obj 30 233 command/command;
#X obj 30 465 print done;
#X obj 190 369 route X y;
#X obj 169 467 list;
#X obj 169 490 t l l;
#X obj 241 508 list length;
#X obj 241 531 > 0;
#X obj 169 549 spigot;
#X obj 169 572 list prepend add;
#X obj 169 595 list trim;
#X obj 232 201 t b b;
#X msg 30 66 dir;
#X obj 30 89 pdcontrol;
#X obj 73 271 route row, f 20;
#X obj 30 434 sel 0;
#X obj 30 115 pack s s;
#X msg 30 145 exec python \$1/datasets/fashion_mnist_images/get_mnist_data.py
\$1 \$2;
#X floatatom 73 318 8 0 0 0 - - - 0;
#X obj 73 294 t f b b;
#X obj 30 183 t a b;
#X obj 30 43 t b a;
#X text 130 313 should reach 59999 for training dataset and 8999 for
validating;
#X text 143 10 check the number atom below to see progress. could take
some time before it starts counting;
#N canvas 1007 202 200 342 isolate_train_or_validate 0;
#X obj 30 20 inlet;
#X obj 64 308 outlet;
#X obj 30 60 symbol;
#X obj 30 83 list fromsymbol;
#X obj 30 106 list split 5;
#X obj 64 195 list split;
#X obj 64 131 t l l;
#X obj 121 149 list length;
#X obj 121 172 - 4;
#X obj 64 218 list tosymbol;
#X obj 64 243 sel validation;
#X msg 64 266 symbol test;
#X connect 0 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 1 6 0;
#X connect 5 0 9 0;
#X connect 6 0 5 0;
#X connect 6 1 7 0;
#X connect 7 0 8 0;
#X connect 8 0 5 1;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X connect 10 1 1 0;
#X connect 11 0 1 0;
#X restore 75 61 pd isolate_train_or_validate;
#X obj 169 618 s mnist_example;
#X obj 190 404 list prepend;
#X obj 190 427 t a a;
#X connect 0 0 21 0;
#X connect 1 0 15 0;
#X connect 1 1 14 0;
#X connect 3 0 26 0;
#X connect 3 1 26 0;
#X connect 4 0 5 0;
#X connect 5 0 8 0;
#X connect 5 1 6 0;
#X connect 6 0 7 0;
#X connect 7 0 8 1;
#X connect 8 0 9 0;
#X connect 9 0 10 0;
#X connect 10 0 25 0;
#X connect 11 0 4 1;
#X connect 11 1 26 1;
#X connect 12 0 13 0;
#X connect 13 0 16 0;
#X connect 14 0 19 0;
#X connect 14 1 3 0;
#X connect 15 0 2 0;
#X connect 15 1 2 0;
#X connect 16 0 17 0;
#X connect 17 0 20 0;
#X connect 19 0 18 0;
#X connect 19 1 4 0;
#X connect 19 2 26 1;
#X connect 20 0 1 0;
#X connect 20 1 11 0;
#X connect 21 0 12 0;
#X connect 21 1 24 0;
#X connect 24 0 16 1;
#X connect 26 0 27 0;
#X connect 27 0 4 1;
#X connect 27 1 26 1;
#X restore 25 480 pd get_fashion_mnist_train_set;
#X msg 464 130 set_batch_size 128;
#X msg 464 204 train;
#X floatatom 605 684 10 0 0 1 loss - - 0;
#X floatatom 576 707 10 0 0 1 accuracy - - 0;
#X floatatom 548 732 8 0 0 1 batch_step - - 0;
#X msg 25 540 set_activation_function 0 relu \, set_activation_function
1 relu \, set_activation_function 2 softmax;
#X msg 25 708 set_optimizer adam;
#X msg 464 569 destroy;
#X floatatom 520 755 8 0 0 1 epoch - - 0;
#X msg 25 427 load_train_set;
#X floatatom 464 436 5 0 0 0 - - - 0;
#N canvas 719 482 640 420 save_and_load 0;
#X listbox 50 27 20 0 0 0 - - - 0;
#X listbox 50 207 20 0 0 0 - - - 0;
#X text 185 22 write a name for the model you want to save \, without
file extension (default is .ann). it will be saved in the models subdirectory
of this directory;
#X text 200 202 write the name of the model you want to load \, without
file extension \, saved in the models subdirectory (make sure you have
first destroyed the network \, if you have already created one);
#X obj 50 174 s mnist_example;
#X obj 50 356 s mnist_example;
#X msg 95 80 dir;
#X obj 95 103 pdcontrol;
#X obj 50 126 pack s s;
#X msg 50 150 save \$2/models/\$1.ann;
#X obj 95 57 loadbang;
#X msg 95 260 dir;
#X obj 95 283 pdcontrol;
#X obj 50 306 pack s s;
#X obj 95 237 loadbang;
#X msg 50 333 load \$2/models/\$1.ann;
#X connect 0 0 8 0;
#X connect 1 0 13 0;
#X connect 6 0 7 0;
#X connect 7 0 8 1;
#X connect 8 0 9 0;
#X connect 9 0 4 0;
#X connect 10 0 6 0;
#X connect 11 0 12 0;
#X connect 12 0 13 1;
#X connect 13 0 15 0;
#X connect 14 0 11 0;
#X connect 15 0 5 0;
#X restore 464 517 pd save_and_load;
#X floatatom 859 121 5 0 0 0 - - - 0;
#X msg 859 143 confidence_thresh \$1;
#X obj 859 304 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000 0 1;
#X msg 859 324 confidences \$1;
#N canvas 1344 291 469 664 get_prediction_data 0;
#X obj 30 20 inlet;
#X obj 30 233 command/command;
#X msg 42 209 kill;
#X obj 30 361 list;
#X obj 30 384 t l l;
#X obj 102 402 list length;
#X obj 102 425 > 0;
#X obj 30 443 spigot;
#X obj 30 489 list trim;
#X obj 115 201 t b b;
#X msg 30 66 dir;
#X obj 30 89 pdcontrol;
#X obj 30 183 t a b;
#X obj 30 115 pack s f;
#X msg 30 145 exec python \$1/datasets/fashion_mnist_images/predict_mnist_data.py
\$1 \$2;
#X obj 30 466 list prepend predict;
#X obj 73 296 route X;
#X obj 30 259 f;
#X obj 30 282 sel 0;
#X obj 73 320 list prepend;
#X obj 73 343 t a a;
#X obj 30 43 t b f f;
#X obj 148 61 s test_prediction;
#X obj 30 512 s mnist_example;
#X connect 0 0 21 0;
#X connect 1 0 17 0;
#X connect 1 1 16 0;
#X connect 2 0 1 0;
#X connect 3 0 4 0;
#X connect 4 0 7 0;
#X connect 4 1 5 0;
#X connect 5 0 6 0;
#X connect 6 0 7 1;
#X connect 7 0 15 0;
#X connect 8 0 23 0;
#X connect 9 0 3 1;
#X connect 9 1 19 1;
#X connect 10 0 11 0;
#X connect 11 0 13 0;
#X connect 12 0 1 0;
#X connect 12 1 9 0;
#X connect 13 0 14 0;
#X connect 14 0 12 0;
#X connect 15 0 8 0;
#X connect 16 0 19 0;
#X connect 17 0 18 0;
#X connect 18 0 3 0;
#X connect 19 0 20 0;
#X connect 20 0 3 1;
#X connect 20 1 19 1;
#X connect 21 0 10 0;
#X connect 21 1 13 1;
#X connect 21 2 22 0;
#X restore 464 459 pd get_prediction_data;
#X msg 857 404 predict_to pred_out;
#N canvas 381 638 395 274 label_array 0;
#X obj 30 154 s pred_out;
#X obj 30 60 loadbang;
#X obj 30 83 t b b;
#X msg 30 131 ylabel -0.1 0 1;
#X msg 57 108 xlabel -0.05 0 1 2 3 4 5 6 7 8 9;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 2 1 4 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X restore 856 712 pd label_array;
#X msg 856 494 predict_to outlet;
#X text 23 309 1) set mode;
#X text 23 515 3) set the activation functions;
#X text 859 71 if you want \, you can set a confidence threshold \,
below which [neuralnet] will output a list of the class with the highest
confidence and its confidence out the second outlet;
#X text 855 378 click to get the predictions in the "pred_out" array
;
#X text 854 454 click to get the predictions out the left outlet of
[neuralnet];
#X msg 25 800 set_weight_coeff 0.01;
#X msg 464 389 bang;
#X obj 464 412 random 10;
#X floatatom 464 889 5 0 0 1 prediction - prediction 0;
#X obj 492 781 unpack f f, f 12;
#X floatatom 492 804 5 0 0 1 class - - 0;
#X floatatom 561 804 8 0 0 1 confidence - - 0;
#X obj 464 838 route float list;
#X obj 510 863 print confidences;
#X msg 25 331 classification;
#X text 25 387 2) load the training set (it will take about 2.5 minutes
\, open the subpatch to see progress);
#X obj 871 814 r test_prediction;
#X obj 856 838 ==;
#X obj 856 787 r prediction;
#X obj 856 863 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000 0 1;
#X text 875 862 correct prediction?;
#X msg 464 295 validate;
#X msg 36 451 load_validation_set;
#X msg 25 631 set_loss_function cat_x_entropy;
#X text 23 607 4) set the loss function;
#X text 21 685 5) set the optimizer;
#X obj 25 354 s mnist_example;
#X obj 25 576 s mnist_example;
#X obj 25 654 s mnist_example;
#X obj 25 731 s mnist_example;
#X obj 25 823 s mnist_example;
#X obj 464 64 s mnist_example;
#X obj 464 153 s mnist_example;
#X obj 464 227 s mnist_example;
#X obj 464 318 s mnist_example;
#X obj 464 592 s mnist_example;
#X obj 464 630 r mnist_example;
#X obj 859 166 s mnist_example;
#X obj 859 347 s mnist_example;
#X obj 857 427 s mnist_example;
#X obj 856 517 s mnist_example;
#X text 573 779 <- not confident output;
#X text 19 13 This example is based on the fashion MNIST data set \,
following the last chapters of "Neural Netowrks from Scratch in Python".
You will need to download the fashion MNIST data set. You can get it
here https://github.com/zalandoresearch/fashion-mnist otherwise \,
navigate to examples/datasets/fashion_mnist_images and run the fashion_mnist_download.py
Python script \, which will download and unzip the dataset for you
(copied from the "A Real Dataset" chapter of the book). Once you do
that \, run the move_set.py Python script \, to move the last 100 images
from each class in the test dataset to the predict/ directory which
will be created by the script \, so you can use it to test the model's
predictions;
#X text 18 260 This example uses the [command] external which you can
find from Help->Find externals;
#N canvas 0 50 450 250 (subpatch) 0;
#X array pred_out 10 float 0;
#X coords 0 1 9 0 140 100 1 0 0;
#X restore 856 574 graph;
#X text 23 761 6) set the initial weights coefficient (works better
for classification than the default which is 0.1);
#X text 461 18 7) set the number of epochs;
#X text 463 180 9) train the model;
#X text 465 259 10) load the validation data (below point 2 \, wait
for a done message in Pd's console) and then validate the model;
#X text 462 351 11) send numbers from 0 to 9 and look at the output
of the left outlet of [neuralnet](the numbers should match);
#X text 462 494 12) save your model if you want \, or load an existing
model;
#X text 461 548 13) destroy the network;
#X text 462 96 8) set the batch size (wait for the "batch size" message
in Pd's console to move on);
#X text 19 186 Passing the training dataset and training the network
can take some time \, so \, if you just want to try out its performance
\, go to [pd save_and_load] under point 12 \, load the "mnist_example"
model \, and then try it out by sending numbers through the number
atom under point 11;
#X text 858 198 you can also tell [neuralnet] to output a list with
the confidences. in this case \, you can send the message "predict_to
pred_out" so that [neuralnet] sends its output to the pred_out array
where you can see the results. if you want to go back to getting the
output from the left outlet \, send "predict_to outlet". when you send
"confidences 1" \, the "confidence_thresh" message has no effect.;
#X obj 464 655 neuralnet 784 128 128 10;
#X msg 464 41 set_epochs 5;
#X connect 1 0 53 0;
#X connect 2 0 54 0;
#X connect 6 0 48 0;
#X connect 7 0 50 0;
#X connect 8 0 56 0;
#X connect 10 0 0 0;
#X connect 11 0 17 0;
#X connect 13 0 14 0;
#X connect 14 0 58 0;
#X connect 15 0 16 0;
#X connect 16 0 59 0;
#X connect 18 0 60 0;
#X connect 20 0 61 0;
#X connect 26 0 51 0;
#X connect 27 0 28 0;
#X connect 28 0 11 0;
#X connect 30 0 31 0;
#X connect 30 1 32 0;
#X connect 33 0 29 0;
#X connect 33 1 34 0;
#X connect 35 0 47 0;
#X connect 37 0 38 1;
#X connect 38 0 40 0;
#X connect 39 0 38 0;
#X connect 42 0 55 0;
#X connect 43 0 0 0;
#X connect 44 0 49 0;
#X connect 57 0 76 0;
#X connect 76 0 33 0;
#X connect 76 1 30 0;
#X connect 76 2 9 0;
#X connect 76 3 5 0;
#X connect 76 4 4 0;
#X connect 76 5 3 0;
#X connect 77 0 52 0;
